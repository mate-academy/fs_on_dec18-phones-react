{"version":3,"sources":["phones/PhonesCatalog.js","phones/PhonesPage.js","App.js","serviceWorker.js","index.js"],"names":["PhonesCatalog","react_default","a","createElement","className","this","props","phones","map","phone","key","id","age","href","alt","name","src","imageUrl","snippet","React","Component","PhonesPage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","fetch","concat","response","json","setState","data-element","data-component","PhonesCatalog_PhonesCatalog","App","selectedPhone","PhonesPage_PhonesPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACVC,KAAKC,MAAMC,OAAOC,IAAI,SAAAC,GAAK,OAE3BR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYM,IAAKD,EAAME,IACnCV,EAAAC,EAAAC,cAAA,mBAAYM,EAAMG,KAElBX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQS,KAAM,IAAMJ,EAAME,IACrCV,EAAAC,EAAAC,cAAA,OACEW,IAAML,EAAMM,KACZC,IAAMP,EAAMQ,YAIhBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,QAKFH,EAAAC,EAAAC,cAAA,KAAGU,KAAM,IAAMJ,EAAME,IACjBF,EAAMM,MAGVd,EAAAC,EAAAC,cAAA,SAAKM,EAAMS,oBA1BoBC,IAAMC,WCG5BC,cACnB,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KAEDsB,MAAQ,CACXrB,OAAQ,IAJOe,mNASMO,MAAK,GAAAC,OAZf,wDAYe,sCAAtBC,kBACeA,EAASC,cAAxBzB,SAENF,KAAK4B,SAAS,CACZ1B,8IAKF,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW8B,eAAa,WACrCjC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKgC,iBAAe,YAGtBlC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKgC,iBAAe,oBAIxBlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKgC,iBAAe,gBACpBlC,EAAAC,EAAAC,cAAA,OAAKgC,iBAAe,gBAEpBlC,EAAAC,EAAAC,cAACiC,EAAD,CAAe7B,OAAQF,KAAKuB,MAAMrB,mBArCNY,IAAMC,WCsB/BiB,qBAtBb,SAAAA,EAAY/B,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgC,IACjBf,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAc,GAAAV,KAAAtB,KAAMC,KAEDsB,MAAQ,CACXU,cAAe,MAJAhB,wEASjB,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXC,KAAKuB,MAAMU,cACTrC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACoC,EAAD,eAfInB,cCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4264132d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PhonesCatalog extends React.Component {\n  render() {\n    return (\n      <ul className=\"phones\">\n        { this.props.phones.map(phone => (\n\n          <li className=\"thumbnail\" key={phone.id}>\n            <span>### { phone.age }</span>\n\n            <a className=\"thumb\" href={'#' + phone.id}>\n              <img\n                alt={ phone.name }\n                src={ phone.imageUrl }\n              />\n            </a>\n\n            <div className=\"phones__btn-buy-wrapper\">\n              <button className=\"btn btn-success\">\n                Add\n              </button>\n            </div>\n\n            <a href={'#' + phone.id}>\n              { phone.name }\n            </a>\n\n            <p>{ phone.snippet }</p>\n          </li>\n\n        ))}\n      </ul>\n    );\n  }\n}\n","import React from 'react';\nimport PhonesCatalog from './PhonesCatalog';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static';\n\nexport default class PhonesPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      phones: []\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`${ BASE_URL }/phones/phones.json`);\n    const phones = await response.json();\n\n    this.setState({\n      phones\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"PhonesPage\">\n        <div className=\"row\">\n\n          <div className=\"col-md-2\" data-element=\"sidebar\">\n            <section>\n              <div data-component=\"filter\"></div>\n            </section>\n\n            <section>\n              <div data-component=\"shopping-cart\"></div>\n            </section>\n          </div>\n\n          <div className=\"col-md-10\">\n            <div data-component=\"pagination1\"></div>\n            <div data-component=\"pagination2\"></div>\n\n            <PhonesCatalog phones={this.state.phones}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PhonesPage from './phones/PhonesPage';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedPhone: null,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid\">\n          { this.state.selectedPhone\n            ? <div>Phone details</div>\n            : <PhonesPage />\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}